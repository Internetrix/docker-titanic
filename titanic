#!/usr/bin/env bash

VERSION="0.01"

# Create base docker-compose command to run
COMPOSE="docker-compose -f docker-compose.yml"

helpMenu() {
    showVersion

    usage="Usage:\n"
    usage="$usage  ./titanic <cmd> <options>"

    commands="Commands:\n"

    commands="$commands  start                       Start the container environment defined in docker-compose.yml\n"
    commands="$commands  stop                        Stops the container environment defined in docker-compose.yml\n"
    commands="$commands  composer <cmds>             Run Composer in the SilverStripe container\n"
    commands="$commands  composer1 <cmds>            Run Composer Version 1 in the SilverStripe container\n"
    commands="$commands  composer2 <cmds>            Run Composer Version 2 in the SilverStripe container\n"
    commands="$commands  importdb                    Perform a MySQL import from an SQL file into a database\n"
    commands="$commands  exportdb                    Perform a MySQL export of a database\n"
    commands="$commands  npm <options>               Runs npm using supplied options in the SilverStripe container\n"
    commands="$commands  yarn <options>              Runs yarn using supplied options in the SilverStripe container\n"
    commands="$commands  exec <container>            Execute a command in a running container\n"
    commands="$commands  help                        Shows Help screen\n"

    options="Options:\n"
    options="$options --help, -h                   Shows Help (this screen)\n"
    options="$options --version, -V, version       Show Version\n"

    examples="Examples:\n"
    examples="$examples  $ ./titanic start\n"
    examples="$examples  $ ./titanic stop\n"
    examples="$examples  $ ./titanic composer1 install\n"
    examples="$examples  $ ./titanic importdb\n"
    examples="$examples  $ ./titanic exportdb\n"
    examples="$examples  $ ./titanic npm install\n"
    examples="$examples  $ ./titanic yarn install\n"

    printf "\n"
    printf "$usage\n\n"
    printf "$commands\n"
    printf "$options\n"
    printf "$examples\n"
}

showVersion() {
    printf "Docker Titanic v$VERSION\n"
}

# If we pass any arguments...
if [ $# -gt 0 ]; then
    if [ "$1" == "init" ]; then
        echo "TITANIC: Initializing Titanic..."

        if [[ ! -f "docker-compose-example.yml" ]]; then
            echo "You are missing the docker-compose-example.yml file. Please readd this to your project."
            exit 1
        fi
        if [[ ! -f "Dockerfile-example" ]]; then
            echo "You are missing the Dockerfile-example file. Please readd this to your project."
            exit 1
        fi

        PS3="Please select which PHP version this project runs from the above list: "

        select phpversion in 5.6 7.0 7.1 7.2 7.3 7.4
        do
            echo "You selected PHP $phpversion"
            break;
        done

        echo "Please enter a name for the database (no spaces or special characters):"
        read DATABASE_NAME  

        echo "The database will be called: $DATABASE_NAME"

        # Refresh docker-compose.yml from scratch
        cp ./docker-compose-example.yml ./docker-compose.yml
        echo "Refreshing docker-compose.yml..."
        # Refresh Dockerfile from scratch
        cp ./Dockerfile-example ./Dockerfile
        echo "Refreshing Dockerfile..."

      

        # Retrieve PHP docker image depending on argument and replace variable
        echo "Updating docker-compose.yml and Dockerfile with given project-specifc settings..."
        if [[ $phpversion = '7.0' ]]; then
          if [ "$MACHINE" == "linux" ]; then
            sed -i 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.0-apache/g' ./docker-compose.yml
            sed -i 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.0-apache/g' ./Dockerfile
          elif [ "$MACHINE" == "mac" ]; then
            sed -i '' 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.0-apache/g' ./docker-compose.yml
            sed -i '' 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.0-apache/g' ./Dockerfile
          fi
        elif [[ $phpversion = '7.1' ]]; then
          if [ "$MACHINE" == "linux" ]; then
            sed -i 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.1-apache/g' ./docker-compose.yml
            sed -i 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.1-apache/g' ./Dockerfile
          elif [ "$MACHINE" == "mac" ]; then
            sed -i '' 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.1-apache/g' ./docker-compose.yml
            sed -i '' 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.1-apache/g' ./Dockerfile
          fi
        elif [[ $phpversion = '7.2' ]]; then
          if [ "$MACHINE" == "linux" ]; then
            sed -i 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.2-apache/g' ./docker-compose.yml
            sed -i 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.2-apache/g' ./Dockerfile
          elif [ "$MACHINE" == "mac" ]; then
            sed -i '' 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.2-apache/g' ./docker-compose.yml
            sed -i '' 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.2-apache/g' ./Dockerfile
          fi
        elif [[ $phpversion = '7.3' ]]; then
          if [ "$MACHINE" == "linux" ]; then
            sed -i 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.3-apache/g' ./docker-compose.yml
            sed -i 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.3-apache/g' ./Dockerfile
          elif [ "$MACHINE" == "mac" ]; then
            sed -i '' 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.3-apache/g' ./docker-compose.yml
            sed -i '' 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.3-apache/g' ./Dockerfile
          fi
        elif [[ $phpversion = '7.4' ]]; then
          if [ "$MACHINE" == "linux" ]; then
            sed -i 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.4-apache/g' ./docker-compose.yml
            sed -i 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.4-apache/g' ./Dockerfile
          elif [ "$MACHINE" == "mac" ]; then
            sed -i '' 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:7.4-apache/g' ./docker-compose.yml
            sed -i '' 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:7.4-apache/g' ./Dockerfile
          fi
        elif [[ $phpversion = '5.6' ]]; then
        if [ "$MACHINE" == "linux" ]; then
            sed -i 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:5.6-apache/g' ./docker-compose.yml
            sed -i 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:5.6-apache/g' ./Dockerfile
          elif [ "$MACHINE" == "mac" ]; then
            sed -i '' 's/{SS_IMAGE_START}/brettt89\/silverstripe-web:5.6-apache/g' ./docker-compose.yml
            sed -i '' 's/{SILVERSTRIPE_IMAGE}/brettt89\/silverstripe-web:5.6-apache/g' ./Dockerfile
          fi
        fi
		
		exit 1

		
        echo "Updated docker-compose.yml and Dockerfile."

        echo "Updating docker-compose.yml with given database name."
        # Use provided database name
        sed -i '' "s/{SS_DATABASE_NAME}/$DATABASE_NAME/g" ./docker-compose.yml
        echo "Updated docker-compose.yml with given database name."

        echo "TITANIC: Making titanic command available"
        chmod +x titanic

        echo "TITANIC: Rebuilding Image..."
        $COMPOSE build
        echo "TITANIC: Finished rebuilding Image..."
        

        # Removing example files
        echo "TITANIC: Almost done... removing example files"
        if [ -f "docker-compose-example.yml" ]; then
            rm docker-compose-example.yml
        fi
        if [ -f "Dockerfile-example" ]; then
            rm Dockerfile-example
        fi
        echo "TITANIC: Finished cleaning up files"

        echo ""
        echo "TITANIC: Ready to Sail!"
        echo "TITANIC: You can now use Titanic"
        echo "For available Titanic commands, run: ./titanic --help"
        echo "TITANIC: Try starting it:"
        echo "./titanic start"

    # Start up containers
    elif [ "$1" == "start" ]; then
        shift 1
        $COMPOSE up -d

    # Stop the containers
    elif [ "$1" == "stop" ]; then
        shift 1
        $COMPOSE down

    # If "composer" is used, pass-thru to "composer"
    # inside a new container
    elif [ "$1" == "composer" ] || [ "$1" == "comp" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            ssh-add -l && composer "$@"
    elif [ "$1" == "composer1" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            ssh-add -l && composer1 "$@"
    elif [ "$1" == "composer2" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            ssh-add -l && composer2 "$@"
    # If "npm" is used, run npm
    # from our node container
    elif [ "$1" == "npm" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            npm "$@"
    # If "yarn" is used, run yarn
    # from our node container
    elif [ "$1" == "yarn" ]; then
        shift 1
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            yarn "$@"
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            chmod 777 -R node_modules
    elif [ "$1" == "importdb" ]; then
        echo "Please enter the name of the database:"
        read DATABASE_NAME  

        # Create a new db if requested
        read -p "Skip creating the database? If no is selected, one will be created for you. (y/n)" choice
        case "$choice" in 
        y|Y ) echo "Database creation was skipped.";;
        n|N ) 
            echo ""
            echo "Creating the $DATABASE_NAME database now..."
            docker-compose exec -T silverstripe mysql -hdatabase -uroot -e "create database $DATABASE_NAME"
            echo "The $DATABASE_NAME database was created successfully.";;
        * ) echo "invalid";;
        esac

        echo ""
        echo "Please enter the name of the SQL to import:"
        read SQLFILE  

        echo "Importing the contents of $SQLFILE into the $DATABASE_NAME database."
        docker-compose exec -T silverstripe mysql -hdatabase -uroot $DATABASE_NAME < $SQLFILE
        echo "Database imported successfully."
    elif [ "$1" == "exportdb" ]; then
        echo "Please enter the name of the database to export:"
        read DATABASE_NAME  
        echo "Please enter the name of the SQL file to export to (i.e db.sql):"
        read SQLFILE

        echo "Exporting the contents of the $DATABASE_NAME database to $SQLFILE."
        docker-compose exec -T silverstripe mysqldump -hdatabase -uroot $DATABASE_NAME > $SQLFILE
        echo "Database exported successfully."
    # Else, pass-thru args to docker-compose
    elif [ "$1" == "--version" ] || [ "$1" == "-v" ] || [ "$1" == "version" ]; then
        showVersion
    elif [ "$1" == "--help" ]; then
       helpMenu
        exit 1
    else
        $COMPOSE "$@"
    fi

    if [ "$1" == "composer" ] || [ "$1" == "composer1" ] || [ "$1" == "composer2" ]; then
        # Change the owner / permissions of the vendor file from root
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            chown -R www-data:www-data vendor
        $COMPOSE run --rm \
            -w /var/www/html \
            silverstripe \
            chmod 777 -R vendor
    fi
else
    # Use the docker-compose ps command if nothing else passed through
    $COMPOSE ps
fi
